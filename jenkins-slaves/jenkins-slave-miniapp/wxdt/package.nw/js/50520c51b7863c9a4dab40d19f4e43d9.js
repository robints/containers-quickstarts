;!function(require, directRequire){;"use strict";const fs=require("fs"),path=require("path"),mkdir=require("mkdir-p"),contentWatcher=require('./162bf2ee28b76d3b3d95b685cede4146.js'),checkGameJSON=require('./48679210e49dc5028a8b6642263eba75.js'),runTask=require('./41168dca39589e852da6631126d0f94d.js'),locales=require('./common/locales/index.js'),getSourceMap=require('./cdbf7243dc99f8461acbb1d57af1d8ae.js'),tools=require('./84b183688a46c9e2626d3e6f83365e13.js'),{uglifyFileNames}=require('./890791d99e6d0eadf6a5a73d8d797338.js'),fileRules=require('./1c8a8c710417d102ab574145dc51b4b0.js'),{bufToUTF8}=require('./efc820e1b92d6e4063535296d4a24213.js'),{FILE_NOT_UTF8}=require('./949d8235c744ced2a80121e4dba34c28.js'),cache={};async function processJSWithServer(a,b=()=>{}){try{const c=Date.now(),d=[...a];b("compilejs",locales.config.PROCESSING.format(a[0].file));const e=await Promise.all(a.map((a)=>runTask({taskName:"processJS",config:{projectPath:a.projectPath,file:a.file,es6:a.es6?"yes":"no",minified:a.minified?"yes":"no",sourceMaps:"map",uglifyFileName:a.uglifyFileName?"yes":"no",nameMapping:JSON.stringify(a.nameMapping),sourceFileName:path.basename(a.file)},dataStr:a.code,maxTimeout:180000,useBackup:!0,downgrade:!1,showInStatus:{text:`compiling ${a.file}`},onAfterRun:()=>{const c=d.findIndex((b)=>b===a);0<=c&&d.splice(c,1),d[0]&&b("compilejs",locales.config.PROCESSING.format(d[0].file))}})));return console.log(`compilejs all files cost time: ${Date.now()-c}`),e}catch(a){if(a instanceof Error)throw a;else throw new Error(a)}}async function compileJS(a,b){const c=b.onProgressUpdate||function(){},d=b.onFilesIgnored||function(){},e=b.distPath,{es6:f,minified:g,uglifyFileName:h}=a.setting,i=await checkGameJSON(a),j=await contentWatcher(a),k=(a.packOptions||{}).ignore||[],l=j.getAllJSFiles().filter((a)=>!fileRules.isFileIgnored(a,k));let m={};if(h){const a=[{type:"file",value:"game.js"},{type:"regex",value:/\/miniprogram_npm\/|^miniprogram_npm\//}],b=[];i.subPackages&&i.subPackages.forEach((c)=>{const d=c.root.replace(/^\//,"");/\.js$/.test(d)?(a.push({type:"file",value:d}),b.push(path.posix.dirname(d))):(a.push({type:"file",value:path.posix.join(d,"./game.js")}),b.push(d))}),i.openDataContext&&(a.push({type:"file",value:path.posix.join(i.openDataContext,"index.js")}),b.push(i.openDataContext)),m=await uglifyFileNames(l,a,b)}const n=h&&m&&0<Object.keys(m).length,o=[],p=[];for(let c=0,d=l.length;c<d;c++){const a=l[c],b=j.getFile(a,null),d=bufToUTF8(b);if(void 0===d){const b=new Error(locales.config.FILE_NOT_UTF8.format(a));throw b.code=FILE_NOT_UTF8,b}const e=tools.generateMD5(d),i=`${a}_${f}_${g}_${h}`;if(cache[i]&&cache[i].md5===e)console.log("compile js",a,"in cache, skip.");else if((f||g||n)&&512000>d.length)o.push({projectPath:j.srcPath,file:a,code:d,es6:f,minified:g,md5:e,uglifyFileName:h,nameMapping:m});else{let b,c=getSourceMap(path.join(j.srcPath,a),d);if(c)try{"string"==typeof c&&(c=JSON.parse(c)),c=await getSourceMap.insertSourcesContent(c,path.join(j.srcPath,a)),c=await getSourceMap.rewriteSourcesIfNeeded(c,"game:///",[a]),b=JSON.stringify(c)}catch(a){c=null}cache[i]={md5:e,jsCode:d,map:b||JSON.stringify(c),ignored:(f||g||n)&&512000<=d.length}}}if(0<o.length){const a=await processJSWithServer(o,c);for(let b=0,c=o.length;b<c;b++){if(a[b].error){const c=a[b].error,d=new Error(c.message);throw d.code=c.code,d}const{file:c,md5:d}=o[b];let e=a[b].map;try{"string"==typeof e&&(e=JSON.parse(e)),e=await getSourceMap.insertSourcesContent(e,path.join(j.srcPath,c)),e=await getSourceMap.rewriteSourcesIfNeeded(e,"game:///",[c]),e=JSON.stringify(e)}catch(a){e=void 0}cache[`${c}_${f}_${g}_${h}`]={md5:d,jsCode:a[b].code,map:e}}}for(let c=0,d=l.length;c<d;c++){const a=l[c],b=n&&m[a]?m[a]:a,d=path.join(e,b),i=path.dirname(d);mkdir.sync(i);const j=cache[`${a}_${f}_${g}_${h}`];if(j&&"undefined"!=typeof j.jsCode){const c=j.jsCode;fs.writeFileSync(d,c),j.ignored&&p.push(a),j.map&&fs.writeFileSync(path.join(e,`${b}.map`),j.map)}}d(p)}module.exports=compileJS;
;}(require("lazyload"), require);
