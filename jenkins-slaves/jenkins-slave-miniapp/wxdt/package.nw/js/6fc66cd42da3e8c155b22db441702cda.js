;!function(require, directRequire){;"use strict";const React=require("react"),{connect}=require("react-redux"),settingsActions=require('./e98c60a262d8d98e69e574a9d12a21df.js'),idepluginMessager=require('./e9e3fd38aeedddd6db73d1d015ff6952.js'),tools=require('./d3976cc01aeebc5b09e11c4135b6bd8d.js'),mapStateToProps=(a)=>({geo:a.settings.geo||{},accelerometer:a.simulator.accelerometer}),mapDispatchToProps=(a)=>({setGeoSetting:tools.bindActionCreators(settingsActions.setGeoSetting,a)});class Sensor extends React.Component{constructor(a){super(a),this.onMessage=(a)=>{const{command:b,data:c}=a;"GET_SENSOR_STATUS"===b?this.sensorMessager.triggerOnEvent("SET_SENSOR_STATUS",{accelerometer:this.props.accelerometer,geo:this.props.geo}):"SET_GEO_SETTING"===b&&this.props.setGeoSetting(c)},this.sensorMessager=idepluginMessager.get("sensor_miniprogram")}componentDidMount(){this.sensorMessager.register(this.onMessage)}componentWillUnmount(){this.sensorMessager.unRegister(this.onMessage)}componentWillReceiveProps(a){a.accelerometer!==this.props.accelerometer&&this.sensorMessager.triggerOnEvent("SET_SENSOR_STATUS",{accelerometer:a.accelerometer})}render(){return null}}module.exports=connect(mapStateToProps,mapDispatchToProps)(Sensor);
;}(require("lazyload"), require);
