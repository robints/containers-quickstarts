;!function(require, directRequire){;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const config_1=require('./292aedc562d71aa6200e3471d0bc7b8e.js'),observer_1=require('./5f3c86137d346ddffec99d08c1ac2bb0.js'),store=require('./bc78839ccca8df9e5ceeb7fae11b7be2.js'),log=require('./72653d4b93cdd7443296229431a7aa9a.js');function getIDEMarkCanonicalName(a){if(!a.startsWith(config_1.PREFIX_IDE)){const b=`[performance] [warn] [getIDEMarkCanonicalName] recv a mark name that does not starts with prefix IDE: ${a}`;if(log.info(b),global.appConfig.isDev)throw new Error(b);return a}return a.slice(config_1.PREFIX_IDE.length)}exports.getIDEMarkCanonicalName=getIDEMarkCanonicalName;function getIDEMarkFullName(a){return`${config_1.PREFIX_IDE}${a}`}exports.getIDEMarkFullName=getIDEMarkFullName;let hasMarkedSimulatorPaint=!1;function markSimulatorPaint(){hasMarkedSimulatorPaint||(hasMarkedSimulatorPaint=!0,performance.mark(getIDEMarkFullName(config_1.HERO_ELEMENT_PAINT.SIMULATOR)))}exports.markSimulatorPaint=markSimulatorPaint;let hasMarkedEditorPaint=!1;function markEditorPaint(){hasMarkedEditorPaint||(hasMarkedEditorPaint=!0,performance.mark(getIDEMarkFullName(config_1.HERO_ELEMENT_PAINT.EDITOR)))}exports.markEditorPaint=markEditorPaint;let hasMarkedDevtoolsPaint=!1;function markDevtoolsPaint(){hasMarkedDevtoolsPaint||(hasMarkedDevtoolsPaint=!0,performance.mark(getIDEMarkFullName(config_1.HERO_ELEMENT_PAINT.DEVTOOLS)))}exports.markDevtoolsPaint=markDevtoolsPaint;const FIRST_COMPILE_START_REPEAT_INTERVAL_TOLERANCE=1000;let compileCommandTimeStamp,hasMarkedCompileStart=!1,shouldNotMarkComplileComplete=!1;function markFirstCompileStart(){try{if(hasMarkedCompileStart){if(hasMarkedCompileComplete)return;const a=store.getState(),b=a.simulator.compileCommand&&a.simulator.compileCommand.ts;b-compileCommandTimeStamp>FIRST_COMPILE_START_REPEAT_INTERVAL_TOLERANCE&&(shouldNotMarkComplileComplete=!0)}hasMarkedCompileStart=!0,performance.mark(getIDEMarkFullName(config_1.COMPILE_PHASE.START));const a=store.getState();compileCommandTimeStamp=a.simulator.compileCommand&&a.simulator.compileCommand.ts||+new Date}catch(a){}}exports.markFirstCompileStart=markFirstCompileStart;let hasMarkedCompileComplete=!1;function markFirstCompileComplete(){try{if(hasMarkedCompileComplete||shouldNotMarkComplileComplete)return;hasMarkedCompileComplete=!0;const a=store.getState(),b=a.simulator.compileCommand&&a.simulator.compileCommand.ts;if(b!==compileCommandTimeStamp)return void log.info(`[performance] [warn] Compile complete mark comes from a different compile command, cannot compare, stats: 
      [start ${compileCommandTimeStamp}] [complete ${b}]
      [diff ${b-compileCommandTimeStamp}]`);performance.mark(getIDEMarkFullName(config_1.COMPILE_PHASE.COMPLETE))}catch(a){}}exports.markFirstCompileComplete=markFirstCompileComplete;function addFirstCompileOffset(a){observer_1.default.firstCompileOffset+=a}exports.addFirstCompileOffset=addFirstCompileOffset;
;}(require("lazyload"), require);
