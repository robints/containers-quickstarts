;!function(require, directRequire){;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const babelCodeFrame=require("babel-code-frame"),fs=require("fs"),OSPath=require("path"),babylon=require("babylon"),babel_traverse_1=require("babel-traverse"),sourcemap=require("source-map");class TranslateResult{constructor(){this.translated=!0,this.errMsg="",this.debugs=[],this.translatedContent="",this.fullPath="",this.translatedSourceMap=""}}function getErrorCodeFrame(a,b,c,d){let e;try{e=new sourcemap.SourceMapConsumer(b||""),a=e.sourceContentFor(c)||a}catch(a){}const f=[];for(const g of d){let b={line:g.line,column:0<g.column?g.column:0};try{e&&(b=e.originalPositionFor({line:g.line,column:g.column}))}catch(a){}const c=babelCodeFrame(a,b.line,b.column);f.push(`${g.reason}\n${c}`)}return f.join("\n\n")}function translateCode(a,b){const c=a.replace(/\r\n/g,"\n").split("\n");for(let d=0;d<c.length;d++){const a=c[d],e=b[d+1];if(e){const b=[];let f=0;for(const c in e){const d=e[c];b.push(a.substr(f,d.column-f+1)),b.push(d.toString),f=d.column+d.fromString.length+1}b.push(a.substr(f)),c[d]=b.join("")}}return c.join("\n")}function translateSourceMap(a,b,c){const d=new sourcemap.SourceMapConsumer(a),e=new sourcemap.SourceMapGenerator({file:b});let f;return d.eachMapping((a)=>{if("number"==typeof a.originalLine&&"number"==typeof a.originalColumn){const b={generated:{line:a.generatedLine,column:a.generatedColumn},source:a.source,name:a.name,original:{line:a.originalLine,column:a.originalColumn}};if(f&&f.line===a.generatedLine?b.generated.column+=f.offset:f=void 0,c[a.generatedLine]){const b=c[a.generatedLine][a.generatedColumn];b&&(f&&f.line===b.line?f.offset+=b.offset:f={line:b.line,offset:b.offset})}e.addMapping(b)}}),e.toString()}exports.tryTranslateSingleFile=(a)=>{const b=new TranslateResult,{rootPath:c,filePath:d,nameMapping:e}=a;let f=OSPath.posix.dirname(d);"."===f&&(f="");let g=a.code;g||(g=fs.readFileSync(OSPath.join(c,d),"utf8"));const h=[];let i;try{i=babylon.parse(g)}catch(c){return h.push({line:c.loc&&c.loc.line||1,column:c.loc&&c.loc.column||1,reason:c.message}),b.translated=!1,b.errMsg=`in ${d}\n${getErrorCodeFrame(g,a.sourceMap,a.sourceFileName,h)}`,b}const j={};if(babel_traverse_1.default(i,{AssignmentExpression(a){const b=a.node.loc.start;"Identifier"===a.node.left.type&&"require"===a.node.left.name&&h.push({line:b.line,column:b.column,reason:`assigning other name with 'require'`}),"Identifier"===a.node.right.type&&"require"===a.node.right.name&&h.push({line:b.line,column:b.column,reason:`'require' should not be renamed`})},VariableDeclarator(a){const b=a.node.loc.start;a.node.id&&"Identifier"===a.node.id.type&&"require"===a.node.id.name&&h.push({line:b.line,column:b.column,reason:`(init) assigning other name with 'require'`}),a.node.init&&"Identifier"===a.node.init.type&&"require"===a.node.init.name&&h.push({line:b.line,column:b.column,reason:`(init) 'require' should not be renamed`})},CallExpression(a){const c=a.node.loc.start;for(const b of a.node.arguments)"Identifier"===b.type&&"require"===b.name&&h.push({line:c.line,column:c.column,reason:`passing 'require' as a parameter is not a good taste`});if("Identifier"===a.node.callee.type&&"require"===a.node.callee.name&&(1!==a.node.arguments.length||"StringLiteral"!==a.node.arguments[0].type)&&h.push({line:c.line,column:c.column,reason:`'require' requires one and only one static string literal`}),"require"===a.node.callee.name&&1===a.node.arguments.length&&"StringLiteral"===a.node.arguments[0].type){const c=a.node.arguments[0].loc.start,g=a.node.arguments[0].value;let h=OSPath.posix.normalize(OSPath.posix.join(f,g));/\.js$/.test(h)||(h+=".js"),/^\//.test(h)&&(h=h.replace(/^\//,""));let i=e[h];i?(!e[d]&&(i=OSPath.posix.relative(f,"./")+"/"+i),!j[c.line]&&(j[c.line]={}),j[c.line][c.column]={line:c.line,column:c.column,fromString:g,toString:i,offset:i.length-g.length},b.debugs.push([d,g,"replace",[h,i]])):b.debugs.push([d,g,"ignored"])}},Identifier(a){const b=a.node.loc.start;"require"===a.node.name&&"CallExpression"!==a.parent.type&&h.push({line:b.line,column:b.column,reason:`require is not being used properly in '${a.parent.type}'`})}}),0<h.length)return b.translated=!1,b.errMsg=`in ${d}\n${getErrorCodeFrame(g,a.sourceMap,a.sourceFileName,h)}`,b;if(0<Object.keys(j).length){b.translatedContent=translateCode(g,j);try{b.translatedSourceMap=translateSourceMap(a.sourceMap||"",a.sourceFileName,j)}catch(a){}}else b.translatedContent=g,b.translatedSourceMap=a.sourceMap;return b};
;}(require("lazyload"), require);
