'use strict';var _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a};!function(require,directRequire){const a=require('react'),b=require('classnames'),c=require('path'),d=require('./common/locales/index.js'),e=require('./3b5f8e2469c474c8d433c1c6926d8999.js'),f=require('./ff946754202ecf377034d29daac7c8d9.js'),g=require('./879b9b1b8431c6089f7619a2530cf66d.js'),h=require('./664c85134de31b9a04ff1f03a1492daf.js'),i=1e3;class j extends a.Component{constructor(a){super(a),this.handleProgressClick=()=>{0<this.state.progressIndicator.running+this.state.progressIndicator.fail&&this.props.setProgressDialog({show:!this.props.progressDialogShow})},this.progressRecorder=h.get();const b=[...this.progressRecorder.tasks.values()];this.state={statusDisplay:{id:'',text:'',duration:i},progressIndicator:{running:b.filter((a)=>'pending'===a.status).length,fail:b.filter((a)=>'fail'===a.status).length}},this.blinkObjects={}}componentDidMount(){this._cancalLocaleListener=d.onChangeLocale(()=>this.forceUpdate()),g.hub.on(g.EVENT.STATUS_DISPLAY,this.onStatusDisplayEvent.bind(this)),this.setupProgressRecorderListeners()}componentWillUnmount(){this._cancalLocaleListener(),this.disposeProgressRecorderListeners()}setupProgressRecorderListeners(){this.onProgressTaskUpdate=()=>{const a=h.get().tasks;let b=0,c=0;for(const[d,e]of a)e.showInDialog&&('pending'===e.status?b++:'fail'===e.status&&c++);(this.state.running!==b||this.state.fail!==c)&&this.setState({progressIndicator:_extends({},this.state.progressIndicator,{running:b,fail:c})})},this.progressRecorder.on(h.ITaskEvent.change,this.onProgressTaskUpdate)}disposeProgressRecorderListeners(){this.progressRecorder.removeListener(h.ITaskEvent.change,this.onProgressTaskUpdate)}onStatusDisplayEvent(a){if(a.type)switch(a.type){case'SHOW':{const b=a.duration||i;this.setState({statusDisplay:{id:a.id||'',text:a.text||'',duration:a.duration||i}}),b!==Infinity&&3600000>b&&setTimeout(()=>{this.state.id===a.id&&this.resetStatusDisplay()},b);break}case'HIDE':{this.state.statusDisplay.id===a.id&&this.resetStatusDisplay();break}}}resetStatusDisplay(){this.setState({statusDisplay:{id:'',text:'',duration:i}})}render(){if(global.onlySimulator)return null;const c=0<this.state.progressIndicator.running+this.state.progressIndicator.fail?{}:{display:'none'};return a.createElement('div',{className:'simulator-status-bar',style:{flexDirection:'row'}},a.createElement('div',{className:b('ui-flex'),style:{flex:1}},a.createElement('label',{style:{overflow:'hidden',textOverflow:'ellipsis'}},this.state.statusDisplay.text?a.createElement('i',{className:'ui-icon-spinner',style:{width:'1em',height:'1em',transform:'scale(2)'}}):null,'\xA0',this.state.statusDisplay.text)),a.createElement('div',{className:b('ui-flex'),style:c,onClick:this.handleProgressClick},a.createElement('label',{style:{overflow:'hidden'}},`${d.config.RUNNING_TASKS.format(this.state.progressIndicator.running)}${this.state.progressIndicator.fail?` ${d.config.FAILED_COUNT.format(this.state.progressIndicator.fail)}`:''}`),a.createElement('i',{className:b({"ui-icon-arrow-down-circle":this.props.progressDialogShow,"ui-icon-arrow-up-circle":!this.props.progressDialogShow})})))}}module.exports=j}(require('lazyload'),require);