;!function(require, directRequire){;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var SDK_TYPE;(function(a){a.APPSERVICE_SDK="APPSERVICE_SDK",a.WEBVIEW_SDK="WEBVIEW_SDK",a.OPEN_SDK="OPEN_SDK"})(SDK_TYPE=exports.SDK_TYPE||(exports.SDK_TYPE={}));var HOOK_TYPE;(function(a){a.PRE_HOOK="PRE_HOOK",a.POST_HOOK="POST_HOOK"})(HOOK_TYPE=exports.HOOK_TYPE||(exports.HOOK_TYPE={}));const hooks={};exports.addHook=(a,b,c)=>{if(!(a in SDK_TYPE))throw new Error(`invalid sdkType: ${a}`);if(!(b in HOOK_TYPE))throw new Error(`invalid hookType: ${b}`);if(!c)throw new Error(`hookFunc must be provided`);hooks[a]||(hooks[a]={}),hooks[a][b]||(hooks[a][b]=new Set),hooks[a][b].add(c)},exports.removeHook=(a,b,c)=>{if(!(a in SDK_TYPE))throw new Error(`invalid sdkType: ${a}`);if(!(b in HOOK_TYPE))throw new Error(`invalid hookType: ${b}`);if(!c)throw new Error(`hookFunc must be provided`);if(hooks[a]){const d=hooks[a][b];d&&(d.delete(c),0===d.size&&delete hooks[a][b])}},exports.invokeHooks=async(a,b,c)=>{if(!(a in SDK_TYPE))throw new Error(`invalid sdkType: ${a}`);if(hooks[a]&&hooks[a][b]){const d=hooks[a][b];if(d&&d.size)for(const a of d)try{await a(c)}catch(a){console.error(`hook exec error`,a)}}};
;}(require("lazyload"), require);
