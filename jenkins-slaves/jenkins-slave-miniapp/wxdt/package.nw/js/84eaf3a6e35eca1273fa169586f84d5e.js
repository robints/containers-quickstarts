;!function(require, directRequire){;"use strict";const React=require("react"),gameserviceMessager=require('./e3681b47a6ce46a8998b8cdff40bdb12.js'),tools=require('./84b183688a46c9e2626d3e6f83365e13.js'),NativeView=require('./5c35f819ec22ae81c6f8ea88445932d6.js');class CoverViewNode extends React.Component{constructor(a){super(a),this.onTextViewClick=()=>{const a=this.props.node;a.transEvt||!a.clickable||gameserviceMessager.triggerOnEvent({eventName:"onTextViewClick",data:{data:a.data}})},this.onImageViewClick=()=>{const a=this.props.node;a.transEvt||!a.clickable||gameserviceMessager.triggerOnEvent({eventName:"onImageViewClick",data:{data:a.data}})},this.onMouseDown=(a)=>{const b=this.props.node;b.transEvt||(b.clickable?(a.stopPropagation(),this.setState({mouseDown:!0})):b.gesture&&(a.stopPropagation(),gameserviceMessager.triggerOnEvent({eventName:"onTouchStart",data:{touch:{x:a.pageX-this.props.containerLeft,y:a.pageY-this.props.containerTop,id:b.viewId},data:b.data}})))},this.onMouseUp=(a)=>{const b=this.props.node;b.transEvt||(b.clickable?(a.stopPropagation(),this.setState({mouseDown:!1})):b.gesture&&(a.stopPropagation(),gameserviceMessager.triggerOnEvent({eventName:"onTouchEnd",data:{touch:{x:a.pageX-this.props.containerLeft,y:a.pageY-this.props.containerTop,id:b.viewId},data:b.data}})))},this.onMouseMove=(a)=>{const b=this.props.node;b.transEvt||b.gesture&&(a.stopPropagation(),gameserviceMessager.triggerOnEvent({eventName:"onTouchMove",data:{touch:{x:a.pageX-this.props.containerLeft,y:a.pageY-this.props.containerTop,id:b.viewId},data:b.data}}))},this.state={mouseDown:!1}}getStyle(){const a=this.props.node||{},b=a.style||{},c=a.type,d=a.position;let e=parseFloat(b.opacity);e=isNaN(e)?1:Math.max(0,Math.min(1,e));let f=Object.assign({display:a.hide?"none":"",pointerEvents:a.transEvt?"none":"",boxSize:"border-box",overflow:b.overflow,backgroundColor:b.bgColor,borderRadius:b.borderRadius,borderWidth:b.borderWidth+"px",borderColor:b.borderColor,borderStyle:"solid",opacity:b.opacity,position:b.fixed?"fixed":"absolute"},d);if(("undefined"!=typeof b.scaleX||"undefined"!=typeof b.scaleY||"undefined"!=typeof b.rotate)&&(f.transform=""),"undefined"!=typeof b.scaleX&&(f.transform+=` scaleX(${b.scaleX})`),"undefined"!=typeof b.scaleY&&(f.transform+=` scaleY(${b.scaleY})`),"undefined"!=typeof b.rotate&&(f.transform+=` rotate(${b.rotate}deg)`),"array"===tools.getType(b.padding)&&(f.padding=b.padding.join("px ")+"px"),"text"===c){const b=a.label||{};f=Object.assign({},f,{color:b.color,fontSize:b.fontSize,textAlign:b.textAlign,fontWeight:b.fontWeight,lineHeight:b.lineHeight?b.lineHeight+"px":1,lineBreak:b.lineBreak})}const g=a.animation;if(g){const a=g.finalStyle;a&&(f.transform="","undefined"!=typeof a.scaleX&&(f.transform+=` scaleX(${a.scaleX})`),"undefined"!=typeof a.scaleY&&(f.transform+=` scaleY(${a.scaleY})`),"undefined"!=typeof a.rotate&&(f.transform+=` rotate(${a.rotate}deg)`),"undefined"!=typeof a.opacity&&(f.opacity=a.opacity),"undefined"!=typeof a.left&&(f.left=a.left+"px"),"undefined"!=typeof a.top&&(f.top=a.top+"px"),f.transition=`all ${g.duration}ms ${g.easing}`)}return this.state.mouseDown&&(f.opacity?f.opacity*=0.6:f.opacity=0.6),f}getSonNodes(){const a=this.props.node,b=this.props.tree,c=[];return(a.sons||[]).forEach((a)=>{b[a]&&c.push(React.createElement(CoverViewNode,{key:a,node:b[a],tree:b,containerLeft:this.props.containerLeft,containerTop:this.props.containerTop}))}),c}renderTextNode(){const a=this.props.node,b=this.getStyle();return React.createElement("div",{style:b,onClick:this.onTextViewClick,onMouseDown:this.onMouseDown,onMouseMove:this.onMouseMove,onMouseUp:this.onMouseUp},a.label&&a.label.content,this.getSonNodes())}renderImageNode(){const a=this.props.node,b=this.getStyle();return b.overflow="hidden",React.createElement("div",{style:b,onClick:this.onImageViewClick,onMouseDown:this.onMouseDown,onMouseMove:this.onMouseMove,onMouseUp:this.onMouseUp},React.createElement("img",{src:a.iconPath,style:{width:"100%",height:"100%"}}),this.getSonNodes())}renderNativeNode(){this.props.node;return React.createElement("div",null,React.createElement(NativeView,{node:this.props.node}),this.getSonNodes())}render(){const a=this.props.node.type;if("text"===a)return this.renderTextNode();return"image"===a?this.renderImageNode():"native"===a?this.renderNativeNode():null}}module.exports=CoverViewNode;
;}(require("lazyload"), require);
