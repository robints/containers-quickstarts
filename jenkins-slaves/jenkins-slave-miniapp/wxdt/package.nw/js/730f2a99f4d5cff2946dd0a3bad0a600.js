;!function(require, directRequire){;'use strict';const URL=require('url'),path=require('path'),fs=require('fs'),pageframeGenerate=require('./bd975ba7c5cc0dc70c1404f310e1632b.js'),appserviceGenerate=require('./3a9c9c49e5ac7329d924774b97ec3e8a.js'),widgetWebview=require('./1214e8288e4a5916d134bebceea90cdd.js'),widgetService=require('./928230404887ec407dd48ed25376594e.js'),gameWebview=require('./67ee44077f752b9db6f47f8c6e157578.js'),gameNativeView=require('./352666085f73288bef079dbb9bc80b46.js'),tools=require('./d3976cc01aeebc5b09e11c4135b6bd8d.js'),projectManager=require('./3bfffbe88b3d923921f851c0697974fe.js'),file=require('./c6f15ef7a40988103528a2ff766b2425.js'),fileSystem=require('./f6cbcecf6ed9f533f6a506310d8f07b6.js'),updateAPI=require('./4e88c741ca9fb65fab96c500b6d7f2fb.js'),consoleDisplay=require('./2dfc6a3df6d6fc51266b293c8420e88b.js'),C=require('./56c390e04c10e91a4aa2a2c19d9a885d.js'),errorPrefix=require('./6242f55dbdfe53c2f07b7a51568311f2.js').errorPrefix,vendorManager=require('./d28a711224425b00101635efe1034c99.js'),plugin=require('./b6d8659542036f6a35f417e0693e56db.js'),log=require('./72653d4b93cdd7443296229431a7aa9a.js'),fileRules=require('./1c8a8c710417d102ab574145dc51b4b0.js'),locales=require('./common/locales/index.js'),experienceGetFile=require('./f44251874c8d52edda272e8fb22660aa.js'),topTools=require('./84b183688a46c9e2626d3e6f83365e13.js'),{asDebug,workerAsDebug,WeixinWorkerTpl}=require('./ebfcad0a5e72b6e693634486564b1394.js'),ignoredFiles=new Set;let ignoreDisplayTimeout;function pushToIgnoredFiles(a){ignoredFiles.add(a),ignoreDisplayTimeout==void 0&&(ignoreDisplayTimeout=setTimeout(()=>{const a=Array.from(ignoredFiles);consoleDisplay.display({command:C.DISPLAY_ERROR,data:{title:locales.config.FAILED_GET_FILE,error:new Error(`${locales.config.SOURCEMANAGER_FILE_ERROR_DETAIL}\n${a.join('\n')}`)}}),ignoreDisplayTimeout=void 0,ignoredFiles.clear()},2e3))}const getAppServiceErrorTpl=()=>`<html>
    <head>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
      <script src="__asdebug__/asdebug.js" charset="UTF-8"></script>
    </head>
    <body>
      <script>
        if (document.readyState == 'complete') {
          history.replaceState({},{}, location.href + '?load')
        } else {
          window.addEventListener('load', (event) => {
            history.replaceState({},{}, location.href + '?load')
          })
        }
      </script>
    </body>
  </html>`;async function getWebviewSource(a){const b=URL.parse(a),c=decodeURI(b.pathname).replace(/^\/__pageframe__\//,''),d=projectManager.getCurrent()||{},e=/pageframe\.html$/.test(c),f=c.match(/__dev__\/([-_\w\.]*)$/);if(f&&f[1])return vendorManager.getFile(f[1]);const g=/__plugin__\//.test(c);if(g){const a=/__plugin__\/([^\/]*)\/([^\/]*)\/(.*)/,b=a.exec(c);if(!b)return'';const f=b[1]||'',g=b[2]||'';if(/pageframe\.js$/.test(c))try{const a=await plugin.getWebviewCode(d,{pluginId:f,version:g});return a}catch(a){log.error(a),consoleDisplay.display({command:C.DISPLAY_ERROR,type:errorPrefix.CODE_ERROR,data:{title:`${locales.config.PLUGIN} ${f}/${g}`,error:a}})}else return plugin.getFile(d,{fileName:b[2]+'/'+b[3]||'',pluginId:f},null)}if(e)return pageframeGenerate.generate(d).catch((a)=>{return log.error(a),`<html>
          <head>
            <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
            <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0" />
          </head>
          <body style="overflow:hidden">
            ${a}
          </body>
          </html>`});const h=d.packOptions&&d.packOptions.ignore||[];if(fileRules.isFileIgnored(c,h))throw pushToIgnoredFiles(c),new Error('file ignored in pack options');return pageframeGenerate.getFile(d,c,null)}async function getAppServiceSource(a){const b=URL.parse(a),c=b.pathname.replace(/^\/appservice\//,''),d=projectManager.getCurrent(),e=/appservice$/.test(c),f=/\.js$/.test(c),g=/^__devplugin__\//.test(c),h=/^__onlineplugin__\//.test(c);let i='';if(0===c.indexOf('__asdebug__/asdebug.js'))return asDebug;if(0===c.indexOf('__workerasdebug__')){if(c.endsWith('workerasdebug.js'))return workerAsDebug;if(c.endsWith('weixinworker.js'))return WeixinWorkerTpl}if(i=c.match(/__dev__\/([-_\w\.]*)$/),i&&i[1])return vendorManager.getFile(i[1]);if(i=c.match(/__workerdev__\/([-_\w\.]*)$/),i&&i[1]){i=i[1];const a=await vendorManager.getFile(i),b=i.replace('__workerdev__/','');return`__workerVendorCode__['${b}'] = ${JSON.stringify(a.toString('utf8'))}`}if(i=c.match(/__alphadev__\/([-_\w\.]*)$/),i&&i[1])return vendorManager.getAlphaFile(i[1]);if(g||h){let a=h?/^__onlineplugin__\/([^\/]*)\/([^\/]*)\/(.*)/:/^__devplugin__\/([^\/]*)\/([^\/]*)\/(.*)/;const b=a.exec(c);if(!b)return'';const f=b[1]||'',g=b[2]||'';if(/appservice\.js$/.test(c))try{const a=await plugin.getServiceCode(d,{pluginId:f,version:g});return a}catch(a){log.error(a),consoleDisplay.display({command:C.DISPLAY_ERROR,type:errorPrefix.CODE_ERROR,data:{title:`${locales.config.PLUGIN} ${f}/${g}`,error:a}})}else if(/appservice\.js\.map$/.test(c))return plugin.getServiceCodeMap(d,{pluginId:d.appid,version:'dev'})}const j=d.packOptions&&d.packOptions.ignore||[];if(!e&&!g&&!h){if(fileRules.isFileIgnored(c,j))return pushToIgnoredFiles(c),'';const a=fileRules.isIngoreByProjectConfig(d,c);if(a)return`console.warn(\`${a.replace(/\`/g,'')}\`)`}if(e)return appserviceGenerate.generate(d).catch((a)=>{return consoleDisplay.display({command:C.DISPLAY_ERROR,type:errorPrefix.CODE_ERROR,data:{error:a}}),getAppServiceErrorTpl()});if(f){i=c.replace(/^\//,'');try{const a=await appserviceGenerate.getJSFile(d,i);return a}catch(a){a.path||(a.path=i),consoleDisplay.display({command:C.DISPLAY_ERROR,type:errorPrefix.CODE_ERROR,data:{error:a}})}}return appserviceGenerate.getFile(d,c)}const getEditorSource=(a)=>new Promise(async(b,c)=>{const d=URL.parse(a),e=decodeURI(d.pathname).replace(/^\/editor/,''),f=Date.now();if(/\/assets\/api\//.test(e))try{let a;/js\.api\.monaco\.js$/.test(e)?a=await getAPI(updateAPI.JSAPIMonacoFilePath):/component\.api\.js$/.test(e)?a=await getAPI(updateAPI.ComponentAPIFilePath):/js\.api\.js$/.test(e)?a=await getAPI(updateAPI.JSAPIFilePath):/wxml\.api\.js$/.test(e)?a=await getAPI(updateAPI.WXMLAPIFilePath):/lib\.wa\.es6\.js$/.test(e)?a=await getAPI(updateAPI.LibWaEs6FilePath):c(`unrecogized url ${e} for getEditorSource`),20>(Date.now()-f)/1e3?b({body:a}):updateAPI.notifyReload()}catch(a){c(a)}else if(/\/files\//.test(e)){const d=projectManager.getCurrent(),e=a.match(/\/files\/(.+)$/);if(e){let a=e[1];if(a){a=decodeURIComponent(a);const e=path.join(d.projectpath,a);fs.readFile(e,(a,d)=>{if(a)return void c(a);let f='text/plain';const g=path.extname(e);switch(g){case'.jpg':case'.jpeg':case'.png':case'.icon':case'.gif':case'.cer':{f='image/image';break}case'.svg':{f='image/svg+xml';break}}b({headers:{"content-type":f},body:d})})}else c('File not found')}else c('File not found')}}),getAPI=(a)=>new Promise((b,c)=>{fs.stat(a,async()=>{try{await updateAPI.update(!1)}catch(a){c(a)}let d='';try{d=fs.readFileSync(a)}catch(a){c(a)}b(d)})});async function getLocalIdResponse(a){const b=fileSystem.getFileRealPath(a),c=b.fileRealPath;return fs.readFileSync(c,null)}async function getWidgetWebviewResource(a){const b=URL.parse(a),c=decodeURI(b.pathname).replace(/^\/widgetwebview\//,''),d=projectManager.getCurrent(),e=/widgetPage\.html$/.test(c);return e?widgetWebview.generate(d):widgetWebview.getFile(d,c,null)}async function getWidgetServiceResource(a){const b=URL.parse(a),c=b.pathname.replace(/^\/widgetservice\//,''),d=projectManager.getCurrent(),e=/conversation$/.test(c),f=/search$/.test(c),g=/\.js$/.test(c);if(e||f)return widgetService.generate(d).catch((a)=>`<html>
              <head>
              <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
              <script>
                console.error(\`${a}\`)
              </script>
              </head>
              <body>
              </body>
              </html>`);if(g){if(d.attr.gameApp)return gameWebview.getFile(d,c,null);try{const a=await appserviceGenerate.getJSFile(d,c);return a}catch(a){a.path||(a.path=c),consoleDisplay.display({command:C.DISPLAY_ERROR,type:errorPrefix.CODE_ERROR,data:{error:a}})}}}async function getGamePageResource(a){const b=URL.parse(a),c=decodeURI(b.pathname).replace(/^\/game\//,''),d=projectManager.getCurrent(),e=/gamePage\.html$/.test(c),f=/subcontext\.html$/.test(a),g=/nativeview\.html$/.test(c);if(f)return gameWebview.getSubContextFrame(d);if(/subcontext$/.test(c))return gameWebview.getSubContextJS(d);if(g)return gameNativeView.generate();if(e)try{const a=await gameWebview.generate(d);return a}catch(a){const b=a.toString();return setTimeout(()=>{consoleDisplay.display({command:C.DISPLAY_ERROR,type:errorPrefix.CODE_ERROR,data:{error:a}})},500),`<html>
              <head>
              <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
              <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0" />
              <script src="__asdebug__/asdebug.js" charset="UTF-8"></script>
              </head>
              <body>
                ${locales.config.COMPILE_ERROR}
                </br>
                ${b}
              </body>
              </html>`}const h=(d.packOptions||{}).ignore||[];if(fileRules.isFileIgnored(c,h))return pushToIgnoredFiles(c),'';const i=fileRules.isIngoreByProjectConfig(d,c);if(i)return`console.warn(\`${i.replace(/\`/g,'')}\`)`;try{const a=await gameWebview.getFile(d,c,null);return a}catch(a){consoleDisplay.display({command:C.DISPLAY_ERROR,type:errorPrefix.CODE_ERROR,data:{error:a}})}}async function getUsrFileResponse(a){const b=fileSystem.getFileRealPath(a),c=b.fileRealPath;return fs.readFileSync(c,null)}async function getExperienceResource(a){const b=URL.parse(a),c=b.pathname.replace(/^\/experience\/inject\//,'');return experienceGetFile(c)}module.exports={getWebviewSource,getAppServiceSource,getEditorSource,getLocalIdResponse,getWidgetWebviewResource,getWidgetServiceResource,getGamePageResource,getUsrFileResponse,getExperienceResource};
;}(require("lazyload"), require);
